#pragma kernel Createh0Texture

#define PI 3.14159265359
#define bound 4000.0


// texture params
float M;
float L;

// wind params
float g;
float V;
float L_;

float2 windDirection;
int directionExp;

float A;
float l;


// In
Texture2D<float4> noise;

// Out
RWTexture2D<float2> h0k;
RWTexture2D<float2> h0minusk;



float Phillips(float2 K, float k) {
    return (exp(-pow(k*L_, -2)) * pow(k, -4)) * pow(abs(dot(K/k, windDirection)), directionExp);
}

[numthreads(8,8,1)]
void Createh0Texture(uint3 id : SV_DispatchThreadID) {
    if (id.x < uint(M) && id.y < uint(M)) {
        float4 noise_vec = noise[id.xy];
        float2 x = float2(id.xy);

        float2 K = 2.0 * PI * (x-M/2) / L;
        float k = length(K);
        if (k < 0.0001) {
            k = 0.0001;
        }

        float suppressionFactor = exp(-k*k*l*l);
        float spectrumFactor = suppressionFactor * 0.5;       
           

        float h0k_val      = A * clamp(sqrt(spectrumFactor * Phillips( K, k)), -bound, bound);
        float h0minusk_val = A * clamp(sqrt(spectrumFactor * Phillips(-K, k)), -bound, bound);

        h0k[id.xy]      = float2(noise_vec.xy * h0k_val     );
        h0minusk[id.xy] = float2(noise_vec.zw * h0minusk_val);
    }
}